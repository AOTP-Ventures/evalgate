# .github/workflows/evalgate.yml
name: EvalGate
on: [pull_request]

jobs:
  evalgate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write   # needed to create/update PR comments
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Install uv
        shell: bash
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Your step: generate outputs for fixtures
      - name: Generate outputs
        shell: bash
        run: |
          python scripts/predict.py --in eval/fixtures --out .evalgate/outputs

      # Run EvalGate but don't fail the job yet (so we can always post a summary/comment)
      - name: Run EvalGate
        id: evalgate
        continue-on-error: true
        shell: bash
        run: |
          uvx --from evalgate evalgate run --config .github/evalgate.yml

      # Write to the PR summary panel
      - name: EvalGate Summary
        if: always()
        shell: bash
        run: |
          uvx --from evalgate evalgate report --summary --artifact ./.evalgate/results.json

      # Render markdown to a file for a sticky PR comment
      - name: Render EvalGate to file
        if: always()
        shell: bash
        run: |
          uvx --from evalgate evalgate report --artifact ./.evalgate/results.json > evalgate.md

      # Create or update a single sticky PR comment (identified by a hidden marker)
      - name: Comment on PR (sticky)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const {owner, repo} = context.repo;
            const pr = context.payload.pull_request.number;
            const marker = '<!-- AOTP_EVALGATE_MARKER -->';
            const body = marker + '\n' + fs.readFileSync('evalgate.md','utf8');
            const {data: comments} = await github.rest.issues.listComments({owner, repo, issue_number: pr});
            const existing = comments.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number: pr, body});
            }

      # Enforce the gate (fail the job if the run didn't pass)
      - name: Enforce EvalGate
        if: always()
        shell: bash
        run: |
          python - << 'PY'
          import json,sys
          ok=json.load(open(".evalgate/results.json"))["gate"]["passed"]
          sys.exit(0 if ok else 1)
          PY